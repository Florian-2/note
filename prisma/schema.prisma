generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Note {
	id          String      @id @default(cuid())
	title       String
	content     String
	createdAt   DateTime   @default(now())
	updatedAt   DateTime   @updatedAt

	// Modification de la relation createdBy
	// createdBy   User        @relation("CreatedBy", fields: [createdById], references: [id])
	// createdById String

	folder      Folder    @relation(fields: [folderId], references: [id]) // Une note appartient à UN dossier
	folderId    String    // Référence au dossier

	@@index([title])
}

model Folder {
	id          String      @id @default(cuid())
	name        String      // Nom du dossier
	createdAt   DateTime    @default(now())
	updatedAt   DateTime    @updatedAt

	createdBy   User        @relation(fields: [createdById], references: [id]) // Un dossier appartient à un utilisateur
  	createdById String      // Référence à l'utilisateur propriétaire du dossier

	notes       Note[]      // Un dossier peut contenir plusieurs notes
}

model User {
	id            String    @id @default(cuid())
	name          String?
	email         String?   @unique
	emailVerified DateTime?
	image         String?
	accounts      Account[]
	sessions      Session[]
	folders       Folder[]  // Un utilisateur peut avoir plusieurs dossiers
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    refresh_token_expires_in Int?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
